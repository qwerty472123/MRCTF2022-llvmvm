mod = 0x97A95E7981
weights = [68460061725, 109536098760, 273840246900, 506604456765, 375519323186, 113349056028, 158238050331, 357552137697, 91106697395, 113753333065, 241198678475, 468705344605, 327105123556, 613134210077, 5657288846, 635312155691, 8937143039, 17874286078, 646054137810, 627034660586, 602687718483, 567685846622, 483990090555, 357674615456, 50275615878, 114243244101, 214794475857, 361128889989, 57184164944, 98580951210, 17070375602, 628658938180]
sumer = [44553131805, 474323399981, 469342094208, 417983316868, 244380538527, 630175002276, 113301906036, 264305430071]
ans = [None] * 8

tl = len(weights) // 2
w1 = weights[:tl]
w2 = weights[tl:]

d1 = {}

for i in range(2**len(w1)):
    t = 0
    w = [0]*len(w1)
    for j, v in enumerate(w1):
        w[j] = (i >> j) & 1
        if w[j]:
            t += w1[j]
    t %= mod
    d1[t] = w

for i in range(2**len(w2)):
    t = 0
    w = [0]*len(w2)
    for j, v in enumerate(w2):
        w[j] = (i >> j) & 1
        if w[j]:
            t += w2[j]
    t %= mod
    for i, s in enumerate(sumer):
        k = (s + mod - t) % mod
        if k in d1:
            assert ans[i] is None
            ans[i] = d1[k] + w

#print(ans)
import struct
flag = b''
for i in ans:
    u = ''.join(map(str, i))
    assert len(u) == 32
    v = int(u[::-1], 2)
    flag += struct.pack('<I', v)

key = b"ezkeyforcipher!!"
key = list(key)

for i in range(0x10):
    t = key[i] ^ (i + 3)
    key[i] = (t >> (i % 8)) | (t << (8 - (i % 8)))
    key[i] &= 0xff

SBox = [
  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 
  0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 
  0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 
  0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 
  0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 
  0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 
  0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 
  0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 
  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 
  0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 
  0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 
  0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 
  0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 
  0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 
  0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 
  0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 
  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 
  0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 
  0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 
  0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 
  0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 
  0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 
  0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 
  0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 
  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 
  0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

ISBox = [0] * 256
for i, v in enumerate(SBox):
    ISBox[v] = i

flag = list(flag)

for i in range(4):
    tmp = flag[8 * i]
    for j in range(0x64):
        for k in range(8)[::-1]:
            tmp = (tmp << 7) | (tmp >> 1)
            tmp &= 0xff
            rpre = pre = flag[8 * i + k % 8]
            pre += key[2 * k] ^ key[2 * k + 1]
            pre &= 0xff
            pre = SBox[pre]
            tmp -= pre
            tmp &= 0xff
            flag[8 * i + (k + 1) % 8] = tmp
            tmp = rpre

a, b, c, d = struct.unpack('<4I', bytes(key))
ckey = [0] * 16

for i in range(4):
    a = ((b * c) & 0xdeadbfef) + (a << 0x3) + (d >> 0x1d)
    a &= 0xffffffff
    b = ((c * d) & 0xdefdbeef) + (b << 0x7) + (a >> 0x19)
    b &= 0xffffffff
    c = ((d * a) & 0xdfadbeef) + (c << 0x9) + (b >> 0x17)
    c &= 0xffffffff
    d = ((a * b) & 0xdeadbeff) + (d << 0x1) + (c >> 0x1f)
    d &= 0xffffffff
    ckey[4 * i] = d + 0xdeadbeef
    ckey[4 * i + 1] = c + 0xaa114514
    ckey[4 * i + 2] = a + 0xf1919810
    ckey[4 * i + 3] = b + 0x1abcdef1

for i in range(16):
    ckey[i] &= 0xffffffff

tpv = [
    # (dest, a, b, pre)
    (0x4, 0x0, 0xc, 0x7),
    (0x8, 0x4, 0x0, 0x9),
    (0xc, 0x8, 0x4, 0xd),
    (0x0, 0xc, 0x8, 0x12),
    (0x9, 0x5, 0x1, 0x7),
    (0xd, 0x9, 0x5, 0x9),
    (0x1, 0xd, 0x9, 0xd),
    (0x5, 0x1, 0xd, 0x12),
    (0xe, 0xa, 0x6, 0x7),
    (0x2, 0xe, 0xa, 0x9),
    (0x6, 0x2, 0xe, 0xd),
    (0xa, 0x6, 0x2, 0x12),
    (0x3, 0xf, 0xb, 0x7),
    (0x7, 0x3, 0xf, 0x9),
    (0xb, 0x7, 0x3, 0xd),
    (0xf, 0xb, 0x7, 0x12),
    (0x1, 0x0, 0x3, 0x7),
    (0x2, 0x1, 0x0, 0x9),
    (0x3, 0x2, 0x1, 0xd),
    (0x0, 0x3, 0x2, 0x12),
    (0x6, 0x5, 0x4, 0x7),
    (0x7, 0x6, 0x5, 0x9),
    (0x4, 0x7, 0x6, 0xd),
    (0x5, 0x4, 0x7, 0x12),
    (0xb, 0xa, 0x9, 0x7),
    (0x8, 0xb, 0xa, 0x9),
    (0x9, 0x8, 0xb, 0xd),
    (0xa, 0x9, 0x8, 0x12),
    (0xc, 0xf, 0xe, 0x7),
    (0xd, 0xc, 0xf, 0x9),
    (0xe, 0xd, 0xc, 0xd),
    (0xf, 0xe, 0xd, 0x12),
]

def function1(inkey):
    tmp = [0] * 0x10
    for i in range(0x10):
        tmp[i] = inkey[i]
    for i in range(0x14, 0, -2):
        for dest, a, b, pre in tpv:
            s = tmp[a] + tmp[b]
            s &= 0xffffffff
            s = (s >> pre) | (s << (32 - pre))
            s &= 0xffffffff
            tmp[dest] ^= s
    outkey = []
    for i in range(0x10):
        outkey.append((inkey[i] + tmp[i]) & 0xffffffff)
    return outkey

cc = [ckey]
for i in range(0x20):
    cc.append(function1(cc[-1]))

for i in range(0x20)[::-1]:
    for j in range(0x20):
        t = cc[i][j % 0x10]
        flag[j] ^= ((t >> j) | (t << (0x20 - j))) & 0xff
    tmp = flag[i]
    tmp = ((tmp & 0xaa) >> 0x1) | ((tmp & 0x55) << 0x1)
    tmp = ((tmp & 0xcc) >> 0x2) | ((tmp & 0x33) << 0x2)
    tmp = ((tmp & 0xf0) >> 0x4) | ((tmp & 0xf) << 0x4)
    flag[i] = tmp

print(bytes(flag).decode())